#!/usr/bin/env node

console.info('⌛ Booting the server & waiting for the database to connect...');

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('microblogLite:server');
const http = require('http');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '5005');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

//Bring in Mongoose so we can communicate with MongoDB
const mongoose = require('mongoose');
mongoose.set('strictQuery', true);

//Use mongoose to connect to MongoDB. Display success or failure message depending on connection status
//If a connection to Mongo is successful, the server will start listening.
mongoose.connect(process.env.DATABASE_URL || 'mongodb://127.0.0.1:27017/microblogLite')
    .then((connection) => {
        const url = new URL(connection.connection.client.s.url)
        console.info('✅ Connected to database at', url.host)

        /**
         * Listen on provided port, on all network interfaces.
         */

        server.listen(port);
        server.on('error', onError);
        server.on('listening', onListening);
    }).catch(() => {
        console.log('❌ Could not connect to the database!')
    });


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    console.log('👂 Server listening on localhost', bind);
    debug('Listening on ' + bind);
}
